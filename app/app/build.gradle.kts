import groovy.json.JsonSlurper

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.google.services)
}

// Task to generate config constants from config.jsonc
tasks.register("generateConfigConstants") {
    val configFile = File(rootProject.projectDir, "../config.jsonc")
    val outputDir = File("$buildDir/generated/source/config")
    val outputFile = File(outputDir, "com/github/ecasept/ccsw/data/preferences/GeneratedConfig.kt")

    inputs.file(configFile)
    outputs.file(outputFile)

    doLast {
        if (!configFile.exists()) {
            throw GradleException("Config file not found: ${configFile.absolutePath}")
        }

        // Read and parse the JSONC file (remove comments)
        val configContent = configFile.readText()
            .lines().joinToString("\n") { line ->
                // Find any comments without quotes before them
                val commentIndex = line.indexOf("//")
                var firstQuote = line.indexOf('"')
                if (firstQuote == -1) {
                    firstQuote = Integer.MAX_VALUE
                }
                if (commentIndex in 0 until firstQuote) line.substring(0, commentIndex) else line
            }

        val json = JsonSlurper().parseText(configContent) as Map<String, Any>
        val serverUrl = json["serverUrl"]?.toString()
            ?: throw GradleException("Missing 'serverUrl' in config.jsonc")

        // Generate Kotlin file
        outputDir.mkdirs()
        outputFile.writeText(
            """
package com.github.ecasept.ccsw.data.preferences

/**
 * Generated configuration constants from config.jsonc
 * DO NOT EDIT - This file is automatically generated during build
 */
object GeneratedConfig {
    const val DEFAULT_SERVER_URL = "$serverUrl"
}
""".trimIndent()
        )

        println("Generated config constants: DEFAULT_SERVER_URL = $serverUrl")
    }
}




android {
    namespace = "com.github.ecasept.ccsw"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.github.ecasept.ccsw"
        minSdk = 31
        targetSdk = 35
        compileSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }

    // Add generated source directory
    sourceSets {
        getByName("main") {
            java.srcDirs("$buildDir/generated/source/config")
            res.srcDirs("src/main/res", "src/main/res/goods")
        }
    }
}

// Make sure config generation runs before compilation
tasks.named("preBuild") {
    dependsOn("generateConfigConstants")
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)

    // Icons
    implementation(libs.androidx.material.icons.extended)

    // DataStore
    implementation(libs.androidx.datastore.preferences)

    // Navigation
    implementation(libs.androidx.navigation.compose)
    implementation(libs.kotlinx.serialization.json)

    // ViewModel
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation(libs.androidx.lifecycle.runtime.compose)

    // FCM
    implementation(platform(libs.google.firebase.bom))
    implementation(libs.firebase.messaging)

    // Retrofit
    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.gson)
    implementation(libs.retrofit.kotlinx.serialization)

    // Vico
    implementation(libs.vico.compose)
    implementation(libs.vico.compose.m3)

    // Testing
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}
